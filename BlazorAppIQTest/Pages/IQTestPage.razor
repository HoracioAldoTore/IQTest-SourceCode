@page "/IQTestPage"
@inject IToastService toastService

<ShowTime Evaluacion="Evaluacion" OnTiempoFinalizado="ShowTime_OnTiempoFinalizado">
</ShowTime>

@if(IsFinish)
{    
    <ShowNotas  Evaluacion="Evaluacion" 
                OnSelectTest="ShowNotas_OnSelectTest">
    </ShowNotas>
}
else if (IsShowOneTest)
{
    <ShowOne Test="_testActivo"
             OnRespuestaSeleccionada="ShowOne_OnRespuestaSeleccionada">
    </ShowOne>
}
else
{
    <ShowTests Evaluacion="Evaluacion" OnFinish="ShowTests_OnFinish"></ShowTests>
}

@code {

    private bool IsFinish = false;
    private bool IsShowOneTest = false;
    private Evaluacion Evaluacion = new Evaluacion();
    private Test _testActivo;

    protected override Task OnInitializedAsync()
    {
        Evaluacion = new Evaluacion();
        for (int nroTest = 1; nroTest <= 2; nroTest++)
        {
            string formatNroTest = nroTest.ToString("000");
            Test test = new Test();
            test.Evaluacion = Evaluacion;
            test.Imagen = $"{formatNroTest}-00.png";
            for (int i = 1; i <= 8; i++)
            {
                Respuesta respuesta = new Respuesta();
                respuesta.Imagen = $"{formatNroTest}-{i.ToString("00")}.png";
                test.Respuestas.Add(respuesta);
            }
            Evaluacion.Tests.Add(test);
        }
        SetRespuestasCorrectas();

        return base.OnInitializedAsync();
    }

    /// <summary>
    /// Establece las respuestas que son correctas para cada test.
    /// </summary>
    private void SetRespuestasCorrectas()
    {
        Dictionary<int, int> correctas = new Dictionary<int, int>();
        correctas[1] = 8; //¿Como se entiende?: Para el test 1 la respuesta correcta es la 8.
        correctas[2] = 1;

        foreach(var corecta in correctas)
        {
            Test test = Evaluacion.Tests.First(t => t.Numero == corecta.Key);
            Respuesta respuestaCorrecta = test.Respuestas.First(r => r.Numero == corecta.Value);
            respuestaCorrecta.Correcta = true;
        }        
    }

    private void ShowTests_OnFinish(Evaluacion evaluacion)
    {
        IsFinish = true; //Finalizo la evaluacion
        Evaluacion = evaluacion;        
        toastService.ShowInfo($"Su nota es un: {evaluacion.Nota}. Puede hacer clic sobre el test incorrecto para corregirlo.");
    }

    private void ShowNotas_OnSelectTest(Test test)
    {
        IsFinish = false;
        IsShowOneTest = true;
        _testActivo = test;
    }

    private void ShowOne_OnRespuestaSeleccionada(Test test)
    {
        IsFinish = true;
        IsShowOneTest = false;
    }

    private void ShowTime_OnTiempoFinalizado()
    {
        IsFinish = true;
        IsShowOneTest = false;

        toastService.ShowInfo("El tiempo de resolución se ha agotado. Ya no puede hacer correcciones.");
    }
}
